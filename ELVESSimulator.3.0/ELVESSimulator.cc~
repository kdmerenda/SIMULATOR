#include "ELVESSimulator.h"
#include <evt/Event.h>
#include <fevt/FEvent.h>
#include <fevt/Eye.h>
#include <fevt/TelescopeSimData.h>
#include <fevt/Telescope.h>
#include <fevt/PixelSimData.h>
#include <fevt/Pixel.h>
#include <fevt/FdConstants.h>
#include <det/Detector.h>
#include <fdet/FDetector.h>
#include <fdet/Eye.h>
#include <fdet/Telescope.h>
#include <fdet/Camera.h>
#include <fdet/Pixel.h>
#include <fdet/Channel.h>
#include <fdet/Mirror.h>
#include <fdet/Filter.h>
#include <fdet/Corrector.h>

#include <utl/Point.h>
#include <utl/UTMPoint.h>
#include <utl/Particle.h>
#include <utl/Vector.h>
#include <utl/TimeStamp.h>
#include <utl/Particle.h>
#include <utl/ErrorLogger.h>
#include <utl/ReferenceEllipsoid.h>
#include <utl/RandomEngine.h>
#include <fwk/LocalCoordinateSystem.h>
#include <fwk/CoordinateSystemRegistry.h>
#include <fwk/CentralConfig.h>
#include <fwk/SVNGlobalRevision.h>
#include <fwk/RandomEngineRegistry.h>
#include <utl/Math.h>

#include <utl/MathConstants.h>
#include <utl/CoordinateSystemPtr.h>
#include <utl/AxialVector.h>
#include <utl/Vector.h>
#include <utl/PhysicalConstants.h>
#include <utl/AugerUnits.h>

#include <CLHEP/Random/Randomize.h>

#include <TMap.h>
#include <TTree.h>
#include <TGraph.h>
#include <TCanvas.h>
#include <TCutG.h>
#include <TH2D.h>
#include <THStack.h>
#include <TLegend.h>
#include <TStyle.h>
#include <TLatex.h>
#include <TH1D.h>
#include <TFile.h>
#include <TVector3.h>
#include <vector>

using namespace std;
using namespace utl;
using namespace fwk;
using namespace evt;
using namespace fevt;
using namespace fdet;
using namespace det;
using CLHEP::RandFlat;


ELVESSimulator::ELVESSimulator() 
{ }

ELVESSimulator::~ELVESSimulator()
{ }


VModule::ResultFlag 
ELVESSimulator::Init()
{
  INFO("ELVESSimulator::Init()");

  CentralConfig* cc = CentralConfig::GetInstance();
  Branch topB = cc->GetTopBranch("ELVESSimulator");

  if (!topB) {
    ostringstream err;
    err << "Missing configuration file for ELVESSimulator";
    ERROR(err);
    return eFailure;
  }

  fRandomEngine = &RandomEngineRegistry::GetInstance().Get(RandomEngineRegistry::eDetector);

  // Initialize the config file parameters. 
  topB.GetChild("ELVESInput").GetData(fELVESInputName);
  topB.GetChild("ELVESTreeName").GetData(fELVESTreeName);
  topB.GetChild("ELVESParameterTreeName").GetData(fELVESParameterTreeName);
  topB.GetChild("ELVESCenterLatitude").GetData(fELVESCenterLat);
  topB.GetChild("ELVESCenterLongitude").GetData(fELVESCenterLon);
  topB.GetChild("NumberOfDiaphragmEntryPoints").GetData(fNumDiaGridPoints);
  topB.GetChild("PhotonDiscretization").GetData(fPhotonDiscr);
  topB.GetChild("NumberOfTreeEntries").GetData(fNumTreeEntries);
  topB.GetChild("FrameSelection").GetData(fLoopSelect);


  fIn = new TFile(fELVESInputName.data());
  fTree = (TTree*)fIn->Get(fELVESTreeName.data());
  if (fNumTreeEntries == 0) fNumTreeEntries = fTree->GetEntries();
  //(if set to zero, run over all entries)

  fParameterTree = (TTree*)fIn->Get(fELVESParameterTreeName.data());
  fParameterTree->SetBranchAddress("parameters", &SimulationParameters);
  fParameterTree->GetEntry(0);


  ostringstream info;
  info << " Version: "
       << GetVersionInfo(VModule::eRevisionNumber) << "\n"
          " Parameters:\n"
          "                Input File: " << fELVESInputName << "\n"
          "                TTree Name: " << fELVESTreeName << "\n"
          "      Parameter TTree Name: " << fELVESParameterTreeName << "\n"
          "Number of Diaphragm Points: " << fNumDiaGridPoints << "\n"
          "     Photon Discretization: " << fPhotonDiscr << "\n"
          "    Number of Tree Entries: " << fNumTreeEntries << "\n"
          "            Frame Selected: " << fLoopSelect << "\n"
          "           Latitude Center: " << fELVESCenterLat/deg << "\n"
          "          Longitude Center: " << fELVESCenterLon/deg;
  INFO(info);



  fLoop = 0;
  fInit = false;
  fStatus = eTransformCoordinates;
  return eSuccess;
}

VModule::ResultFlag 
ELVESSimulator::Run(evt::Event& event)
{
  INFO("ELVESSimulator::Run()");

  /*
    =======================================
    BEGIN coordinate transformation code: 
    The data is read form the file and saved
    in vectors in UTMPoint format, for easy
    coordinate transforms. 
    =======================================
  */ 
    const ReferenceEllipsoid ellipsoid(ReferenceEllipsoid::Get(ReferenceEllipsoid::eWGS84));
    const CoordinateSystemPtr referenceCS = Detector::GetInstance().GetReferenceCoordinateSystem();
    UTMPoint elvesSimulatedLocationUTM(0.0, 0.0, 5.0*km, ellipsoid);//altitude does matter. This is just for reference
    UTMPoint elvesWantedLocationUTM(fELVESCenterLat, fELVESCenterLon, 5.0*km, ellipsoid);
    const CoordinateSystemPtr WantedLocationCS =  fwk::LocalCoordinateSystem::Create(elvesWantedLocationUTM.GetPoint());
    const CoordinateSystemPtr SimulatedLocationCS =  fwk::LocalCoordinateSystem::Create(elvesSimulatedLocationUTM.GetPoint());
    


  if(fStatus == eTransformCoordinates && !fInit){
    cout << "COORDINATE TRANSFORM: " << endl;
    //''fast ''calculation of time to go through halfway point to limit data saved inoto memory. 
    typedef boost::tuple<double,double,double> UTMLocation;
    UTMLocation DetectorLocation = ellipsoid.PointToLatitudeLongitudeHeight(Point(0,0,0,referenceCS));  
    UTMPoint DetectorLocationUTM(DetectorLocation.get<0>(),DetectorLocation.get<1>(),DetectorLocation.get<2>(),ellipsoid);
    UTMLocation SourceLocation = ellipsoid.PointToLatitudeLongitudeHeight(Point(0,0,0,WantedLocationCS));   
    UTMPoint SourceLocationUTM(SourceLocation.get<0>(),SourceLocation.get<1>(),SourceLocation.get<2>(),ellipsoid);
    UTMPoint Half80LocationUTM((SourceLocation.get<0>()+DetectorLocation.get<0>())/2.,(SourceLocation.get<1>()+DetectorLocation.get<1>())/2.,80*km,ellipsoid);
    cout << "Sou-Ion 80km: " << (SourceLocationUTM.GetPoint()-Half80LocationUTM.GetPoint()).GetMag() << endl;
    cout << "Ion-Tel 80km: " << (DetectorLocationUTM.GetPoint()-Half80LocationUTM.GetPoint()).GetMag() << endl;
    double maxPhotonTime = ((SourceLocationUTM.GetPoint()-Half80LocationUTM.GetPoint()).GetMag()+(DetectorLocationUTM.GetPoint()-Half80LocationUTM.GetPoint()).GetMag())/(kSpeedOfLight*pow(10,9))+0.0008;
    cout << "Max Time Saved (Above + 800us):" <<  maxPhotonTime << endl; //may be cutting points in last trace. 
    
    TVector3* position = 0;
    Double_t time;
    Double_t n;
    
    //TBD: Final structure of Input files
    fTree->SetBranchAddress("position", &position);
    fTree->SetBranchAddress("nN22P", &n);
    fTree->SetBranchAddress("time", &time);
        
    
    int previousProgress = -1;//for progress bar
    for(int i=0; i<fNumTreeEntries;i++){
      fTree->GetEntry(i);    
      
      UTMPoint locationCellUTM(ellipsoid.LatitudeLongitudeHeightToPoint((90.*deg)-position->Theta(), position->Phi(), position->Mag()-6370*km),ellipsoid);//Make sure the north south orientation is correct, 90-theta should be correct. Maybe use TVector3? 
      Point posTMP =   Point(locationCellUTM.GetPoint(SimulatedLocationCS).GetX(SimulatedLocationCS),
			     locationCellUTM.GetPoint(SimulatedLocationCS).GetY(SimulatedLocationCS),
			     locationCellUTM.GetPoint(SimulatedLocationCS).GetZ(SimulatedLocationCS),
			     WantedLocationCS);
      
      double photonTime=time+posTMP.GetR(referenceCS)/(kSpeedOfLight*pow(10,9));
      if(photonTime <= maxPhotonTime){
	ELVESSimData ESDtmp;
	ESDtmp.time = photonTime;
	ESDtmp.ndensity = n;
	ESDtmp.positions = posTMP;
	ELVESData.push_back(ESDtmp);
      }
      
      displayProgress(i,fNumTreeEntries,previousProgress);
    }
    
    nPhotonsToCreate = ELVESData.size();
    cout << endl <<  "Number of Simulated Source Points: " << nPhotonsToCreate << endl;
    
    fIn->Close();
    
    sort(ELVESData.begin(), ELVESData.end(), by_ndensity());
    cout << ELVESData[0].ndensity  << " " << ELVESData[ELVESData.size()-1].ndensity << endl;
    double ndensityMIN = ELVESData[0].ndensity;
    double ndensityMAX = ELVESData[ELVESData.size()-1].ndensity;
    
    sort(ELVESData.begin(), ELVESData.end(), by_time());
    cout << ELVESData[0].time  << " " << ELVESData[ELVESData.size()-1].time << endl;

    //need to find the location in the array where the 100us windows are
    int countertmp = 1;
    TimeCutIndices.push_back(0);
    for (int i = 0; i < ELVESData.size(); i++){
      ELVESData[i].ndensitynormalized = (ELVESData[i].ndensity - ndensityMIN)/(ndensityMAX-ndensityMIN);
      if ((ELVESData[i].time - ELVESData[0].time) < 0.0001*countertmp+SimulationParameters.SizeStepTime
	  && (ELVESData[i].time - ELVESData[0].time) > 0.0001*countertmp-SimulationParameters.SizeStepTime){
	TimeCutIndices.push_back(i);
	cout << i << " " << ELVESData[i].time - ELVESData[0].time << endl;
	countertmp++;
	if(countertmp == 12) break;//never will need to store more than 12 windows
      } 
    }
    //the idea is that the location in the whole simulation over which to create photons at each loop is obtained
    //and entries of interest are in TimeCutIndices[fLoop-1] and TimeCutIndices[fLoop]

    

    

    /* 
       cout << "TREE CREATION:" << endl;
       TFile* fTMP = new TFile("simDataCSTrans.root","recreate");
       int numFrames = 8;
       vector<TTree*> vTrees(numFrames);  
       double timeTOFILL, nTOFILL, elTOFILL, azTOFILL, disTOFILL;
       TVector3 pointTOFILL;
       cout << numFrames << " trees are being produced..." << endl;
       for(int j=0; j<vTrees.size(); j++){
       TString name("");
       name += j;
       delete vTrees[j];
       vTrees[j] = new TTree(name,name);
       vTrees[j]->Branch("positions",&pointTOFILL);
       vTrees[j]->Branch("n",&nTOFILL,"n/D");
       vTrees[j]->Branch("time",&timeTOFILL,"time/D");
       for(int i=0; i<nPhotonsToCreate; i++){ 
       timeTOFILL = timevec[i]-minPhotonTime;
       nTOFILL = nvec[i];
       //       pointTOFILL = PositionPoints[i];
       pointTOFILL.SetXYZ(1.,1.,1.);
       pointTOFILL.SetTheta(PositionPoints[i].GetTheta(referenceCS));
       pointTOFILL.SetPhi(PositionPoints[i].GetPhi(referenceCS));
       pointTOFILL.SetMag(PositionPoints[i].GetR(referenceCS));
       if(timeTOFILL == j*0.0001 && 
       timeTOFILL < (j+1)*0.0001){
       vTrees[j]->Fill();
       }
       }
       cout << "TREE "<< j*100 << "-" << (j+1)*100 << ": " <<  vTrees[j]->GetEntries() << endl;
       }
       fTMP->Write();
    *///done to output tress of any frame size. 
    
    //  return eSuccess;
  
  /*
    ==================================
    END: coordinate transformation code
    ==================================
  */


      /*
    =======================================
    BEGIN: event creation
    The goal is to access the TelSimData 
    structure and initialize it. First loop
    through individual telescopes. 
    =======================================
  */
    //THIS MAY BE USELESS  
    Detector& detector = Detector::GetInstance();
    const FDetector& detFD = detector.GetFDetector();
    
    if (!event.HasFEvent())
      event.MakeFEvent();
      
    fevt::FEvent& fEvent = event.GetFEvent();
    
    INFO("Creating FEvent");
    
    // set the FD event times
    fSimTime = detector.GetTime();
    fEvent.GetHeader().SetTime(fSimTime);
    event.GetHeader().SetTime(fSimTime);
    
    // set the sim header id
    ostringstream idStr;
    idStr << "ELVESSimulation_0" ;
    event.GetHeader().SetId(idStr.str());
    
    for (FDetector::EyeIterator iEye = detFD.EyesBegin();
	 iEye != detFD.EyesEnd() ; ++iEye) {
      const unsigned int eyeId = iEye->GetId();
      
      fEvent.MakeEye(eyeId, fevt::ComponentSelector::eInDAQ);
      fevt::Eye& eyeEvent = fEvent.GetEye(eyeId, fevt::ComponentSelector::eInDAQ);
      
      
      for (fdet::Eye::TelescopeIterator iTel = iEye->TelescopesBegin();
	   iTel != iEye->TelescopesEnd(); ++iTel) {
	const unsigned int telId = iTel->GetId();
	
	eyeEvent.MakeTelescope(telId, fevt::ComponentSelector::eInDAQ);
	fevt::Telescope& telEvent = eyeEvent.GetTelescope(telId, fevt::ComponentSelector::eInDAQ);
	
	telEvent.MakeSimData();
	fevt::TelescopeSimData& telSim = telEvent.GetSimData();
	
	//	telSim.SetPhotonsStartTime(fSimTime);
	telSim.SetNumberOfPhotonBins(700);
	
      }
    }  
  }    
 
  /*
    =======================================
    END: event creation
    =======================================
  */
  
  /*
    =======================================
    BEGIN: photon generator
    At this point the angle and point of 
    entry of individual photons has to be 
    calculated. Assume all grid cells in 
    the simulation are a given point source.
    Then, each point of entry should see a 
    photon from each sim. grid cell. 
    =======================================
  */
   /*
  for (fevt::FEvent::EyeIterator iEye = fEvent.EyesBegin(fevt::ComponentSelector::eInDAQ);
       iEye != fEvent.EyesEnd(fevt::ComponentSelector::eInDAQ); ++iEye) {
    const int eyeId = iEye->GetId();
    const fdet::Eye& eye = Detector::GetInstance().GetFDetector().GetEye(eyeId);    
    const CoordinateSystemPtr eyeCS = eye.GetEyeCoordinateSystem();

    for (fevt::Eye::TelescopeIterator iTel = iEye->TelescopesBegin(fevt::ComponentSelector::eInDAQ);
         iTel != iEye->TelescopesEnd(fevt::ComponentSelector::eInDAQ); ++iTel) {
      const int telId = iTel->GetId();
      fevt::TelescopeSimData& telSim = iTel->GetSimData();

      telSim.ClearPhotons();

      
      //use detector info to see if elves center is in FOV of given telescope. If it is, create photons for TelSIm class
      const fdet::Telescope& detTel = detFD.GetTelescope(*iTel);
      const double rDia = detTel.GetDiaphragmRadius();
      const double binWidth = detTel.GetCamera().GetFADCBinSize();
      const double normWavelength = detFD.GetReferenceLambda();
      const double fRDiaMin = rDia/10. ;//minimum radius on diaphragm, lets say a tenth of the radius
      const CoordinateSystemPtr& telCS = detTel.GetTelescopeCoordinateSystem();
      double detFOV = detTel.GetCamera().GetFieldOfView()/deg;//~23 deg
      detFOV += 10;//add 10 degrees to FOV so that more telescopes will be triggered. 
      double elvesTheta  = 90.-elvesWantedLocationUTM.GetPoint(referenceCS).GetTheta(referenceCS)/deg;
      double elvesPhi = elvesWantedLocationUTM.GetPoint(referenceCS).GetPhi(referenceCS)/deg;
      double elvesR = elvesWantedLocationUTM.GetPoint(referenceCS).GetR(referenceCS)/km;

      Vector telAxis = detTel.GetAxis();
      double telFOVLow =  telAxis.GetPhi(referenceCS)/deg - detFOV/2.;
      double telFOVHigh =  telAxis.GetPhi(referenceCS)/deg + detFOV/2.;
      
      //if we are outside detector field of view, go to next telescope, need to add elevation check too. 
      ostringstream info;  
      if (elvesPhi > telFOVLow && elvesPhi < telFOVHigh) {

	//quick cut to only do 1 telescope
	if (telId != 4) continue;

	info << "Eye: " <<  eyeId << " Tel: " << telId << endl;
	info << "Tel Axis wrt refCS (Az,El): " << telAxis.GetPhi(referenceCS)/deg << " "  <<   90.-telAxis.GetTheta(referenceCS)/deg <<  endl;
	info << "FOV: " << detFOV << endl;
	info << "ELVES Coord wrt refCS (r, Az, El): " << elvesR << "  " << elvesPhi  << " " << elvesTheta << endl;
	info << "\n\nAdding Photons to TelescopeSimData: ";
	INFO(info);
      }else{
	info << "Eye: " <<  eyeId << " Tel: " << telId << " - ELVES not in field of view";
        INFO(info);
	continue;//not in FOV so don't add photons. 
      }

      
      //Now create the entry points on the diaphragm. Following usual randomization procedure. 
    
      Int_t previousProgress = -1; // for progress bar at end of each diapoints. 
      ofstream fout("dump");
      for(int iDiaPoint=0; iDiaPoint<fNumDiaGridPoints;iDiaPoint++){
	double diaPh = RandFlat::shoot(&fRandomEngine->GetEngine(), 0.0, 2*kPi);
	double diaR = sqrt(RandFlat::shoot(&fRandomEngine->GetEngine(), fRDiaMin*fRDiaMin, rDia*rDia));
	
	double xDia = diaR*cos(diaPh);
	double yDia = diaR*sin(diaPh);
	Point pIn(xDia, yDia, 0.0, telCS);	//entry point needed to initialize photon

	//for each point now look at each photons coming from the simulation. Here we are looping through all the cells that we decided will create photons earlier.
  	for(int iCell=0; iCell<nPhotonsToCreate;iCell+=5){

	   double photonTime=ELVESData[iCell].time-ELVESData[0].time;
	   if(photonTime > 0.0001) continue;
	  
	   Vector nIn (1.,(ELVESData[iCell].positions-pIn).GetTheta(telCS) ,(ELVESData[iCell].positions-pIn).GetPhi(telCS), telCS, Vector::kSpherical);
	   const double weight = 1.0;//needs to be transformed to photons using number density? and scaled to 4pi/d*d?
	   utl::Photon photonIn(pIn, -nIn, normWavelength, weight);
	   photonIn.SetTime(TimeInterval(photonTime));
	   telSim.AddPhoton(photonIn);
	
	 }
	displayProgress(iDiaPoint,fNumDiaGridPoints,previousProgress);
      }
      cout << endl;//to keep progress bar there. 
    }
  }
   */
  /*
    =======================================
    END: photon generator
    =======================================
  */
  /*
    =======================================
    BEGIN: Import from ShowerphotonGenerator --- WORK IN PROGRESS
    need to bin the ELVESData and at each bin, need to create a photon trace, and need to sample photons from that trace to pass and add them to the telSim. Need to decide the correct sampling? Or need to modify this process for our purposes. THe problem is that the the photon generator above does not have the correct timing implementation for photons. It seems the binning of the traces needs to be done before the Telescope Simulator. Check the FdSimulation to see if the PhotonTrace Iterator is really needed. Also for the weight of photons need to make sure to correct for the amount put and overlapping at the same location. 
    =======================================
  */

  if(fStatus == eGeneratePhotons && fInit && fLoop!=0){
    fevt::FEvent& fEvent = event.GetFEvent();
    Detector& detector = Detector::GetInstance();
    const FDetector& detFD = detector.GetFDetector();
    fEvent.GetHeader().SetTime(fSimTime+TimeInterval((fLoop-1)*100000));

    for (fevt::FEvent::EyeIterator iEye = fEvent.EyesBegin(fevt::ComponentSelector::eInDAQ),
	   end = fEvent.EyesEnd(fevt::ComponentSelector::eInDAQ);
	 iEye != end; ++iEye) {
      
      // if (iEye->GetStatus() == fevt::ComponentSelector::eDeSelected)
      // 	continue;//this was here and blocking multiple loop over eyes. 
      
      unsigned int eyeId = iEye->GetId();
      fevt::Eye& eyeEvent = *iEye;
      
      for (fevt::Eye::TelescopeIterator iTel = eyeEvent.TelescopesBegin(fevt::ComponentSelector::eInDAQ),
	     end = eyeEvent.TelescopesEnd(fevt::ComponentSelector::eInDAQ);
	   iTel != end; ++iTel) {
	
	const unsigned int telId = iTel->GetId();
	
	fevt::Telescope& telEvent = *iTel;
       	telEvent.SetTracesStartTime(fSimTime+TimeInterval((fLoop-1)*100000));
	//       	telEvent.SetTracesStartTime(TimeStamp(0));
	const fdet::Telescope& detTel = detFD.GetTelescope(telEvent);
	
	const double rDia = detTel.GetDiaphragmRadius();
	const double diaphragmArea = detTel.GetDiaphragmArea();


	fevt::TelescopeSimData& telSim = telEvent.GetSimData();
	telSim.SetPhotonsStartTime(fSimTime+TimeInterval((fLoop-1)*100000)); 

	//	fevt::TelescopeSimData& telSim = telEvent.GetSimData();
	const double binWidth = detTel.GetCamera().GetFADCBinSize();
	const double normWavelength = detFD.GetReferenceLambda();
	const double fRDiaMin = rDia/10. ;//minimum radius on diaphragm, lets say a tenth of the radius
	const CoordinateSystemPtr& telCS = detTel.GetTelescopeCoordinateSystem();
	double detFOV = detTel.GetCamera().GetFieldOfView()/deg;//~23 deg
	detFOV += 10;//add 10 degrees to FOV so that more telescopes will be triggered. 
	double elvesTheta  = 90.-elvesWantedLocationUTM.GetPoint(referenceCS).GetTheta(referenceCS)/deg;
	double elvesPhi = elvesWantedLocationUTM.GetPoint(referenceCS).GetPhi(referenceCS)/deg;
	double elvesR = elvesWantedLocationUTM.GetPoint(referenceCS).GetR(referenceCS)/km;
	
	Vector telAxis = detTel.GetAxis();
	double telFOVLow =  telAxis.GetPhi(referenceCS)/deg - detFOV/2.;
	double telFOVHigh =  telAxis.GetPhi(referenceCS)/deg + detFOV/2.;
	
	//if we are outside detector field of view, go to next telescope, need to add elevation check too. 
	ostringstream info;  
	if (elvesPhi > telFOVLow && elvesPhi < telFOVHigh) {
	  
	  //quick cut to only do 1 telescope
	  if (telId != 4) continue;
	  
	  info << "Eye: " <<  eyeId << " Tel: " << telId << endl;
	  info << "Tel Axis wrt refCS (Az,El): " << telAxis.GetPhi(referenceCS)/deg << " "  <<   90.-telAxis.GetTheta(referenceCS)/deg <<  endl;
	  info << "FOV: " << detFOV << endl;
	  info << "ELVES Coord wrt refCS (r, Az, El): " << elvesR << "  " << elvesPhi  << " " << elvesTheta << endl;
	  info << "\n\nAdding Photons to TelescopeSimData... ";
	  INFO(info);
	}else{
	  info << "Eye: " <<  eyeId << " Tel: " << telId << " - ELVES not in field of view";
	  INFO(info);
	  continue;//not in FOV so don't add photons. 
	}
	
	
	cout << fSimTime.GetGPSSecond() << " " << fSimTime.GetGPSNanoSecond()	<< " "<< TimeInterval((fLoop-1)*100000) << " " << TimeInterval((fLoop-1)*100000).GetSecond() << " "  << TimeInterval((fLoop-1)*100000).GetNanoSecond() << endl;	


	
	unsigned int countRTPhotons = 0;
	double totalWeightPhotons = 0;
	
	
	//	const CoordinateSystemPtr& telCS = detTel.GetTelescopeCoordinateSystem();
	const Point telescopePos(0.0, 0.0, 0.0, telCS);
	
	//THIS NEEDS TO BE REDEFINED
	// definition of the light trace at the diaphragm
	// const unsigned int nBins = distanceTrace.GetSize();
      // const double tracebin = distanceTrace.GetBinning();
	const unsigned int nBins = 1000;
	const double tracebin = 1e-7;
	
	
	telSim.ClearPhotons();
	if (!telSim.HasPhotonTrace(FdConstants::eFluorDirect))
	  telSim.MakePhotonTrace(FdConstants::eFluorDirect,1);
	if (!telSim.HasRayTracedPhotonTrace())
	  telSim.MakeRayTracedPhotonTrace(nBins, tracebin);
	telSim.ClearRayTracedPhotonTrace();
	TraceI& rayTracedPhotonTrace = telSim.GetRayTracedPhotonTrace();
 
	const fdet::Camera& detCamera = detTel.GetCamera();
	//	const double normWavelength = detFD.GetReferenceLambda();
	const double telTraceBinWidth = detCamera.GetFADCBinSize();
	const double totalTraceDuration = tracebin * nBins;
	const unsigned int telTraceNBins = int(0.5 + totalTraceDuration / telTraceBinWidth);
	//	telSim.SetNumberOfPhotonBins(telTraceNBins);
	
	cout << " photonTraceSize=" << nBins
	     << " tracebin=" << tracebin
	     << " telTraceBinWidth=" << telTraceBinWidth
	     << " telTraceNBins=" << telTraceNBins << endl;
	
      
      //      for (unsigned int iTrace = 0; iTrace < nBins; ++iTrace) {
	
        unsigned int totalNRayTracedPhotonsPerBin = 0;
        const unsigned int nRayTrace = 30;
	
        totalNRayTracedPhotonsPerBin += nRayTrace;
        countRTPhotons += nRayTrace;
	
	//        for (unsigned int iSample = 0; iSample < nRayTrace; ++iSample) {
	//	for(int iCell=TimeCutIndices[fLoop-1]; iCell<TimeCutIndices[fLoop];iCell+=5){
	cout << TimeCutIndices[fLoop-1] << " " <<  TimeCutIndices[fLoop]<< " " << TimeCutIndices[fLoop]-TimeCutIndices[fLoop-1]  << endl;
	
	for(int iCell=TimeCutIndices[fLoop-1]; iCell<TimeCutIndices[fLoop];iCell+=fPhotonDiscr){
	  for(int iDiaPoint=0; iDiaPoint<fNumDiaGridPoints;iDiaPoint++){
	    // Generating random point on the diaphragm
	    // Uniform phi
	    
	    const double diaPh = RandFlat::shoot(&fRandomEngine->GetEngine(), 0.0, kTwoPi);
	    const double diaR = rDia * sqrt(RandFlat::shoot(&fRandomEngine->GetEngine(), 0.0, 1.0));
	    const double xDia = diaR * cos(diaPh);
	    const double yDia = diaR * sin(diaPh);
	    const Point pIn(xDia, yDia, 0.0, telCS);
          
	    
	    
	    //const double distancePhoton = distanceBin + tracebin*RandFlat::shoot(&fRandomEngine->GetEngine(), -0.5, 0.5);
	    
	    //	  Point pointOnShower = showerCore + showerAxis * distancePhoton;
	    //	  Vector photonDir = pointOnShower-telescopePos;
	    //	  double timeShift = 0; // time shift with respect to 1D flight path
	    
	    double photonTime=(ELVESData[iCell].time-ELVESData[0].time - (fLoop-1)*0.0001)*1e9;//need floop to reset time at each event to 0. Also need nanoseconds?

	    //	    photonTime = round(photonTime/100)*100;
	    photonTime = round(photonTime/100)*100;
	    
	    Vector nIn (1.,(ELVESData[iCell].positions-pIn).GetTheta(telCS) ,(ELVESData[iCell].positions-pIn).GetPhi(telCS), telCS, Vector::kSpherical);
	    
	    nIn.Normalize();
	    const double projectedDiaphragmArea = diaphragmArea * nIn.GetCosTheta(telCS);
	    //          const double weight = nBunchPhotons * projectedDiaphragmArea;
	    //	    const double weight = ELVESData[iCell].ndensity * 2.0e1 * 500e-9;//TBD	  
	    //	    const double weight = 1000*ELVESData[iCell].ndensitynormalized;//TBD	  
	    const double weight = ELVESData[iCell].ndensity;//TBD	  
	    //	  const double weight = ELVESData[iCell].ndensity * 1e12;//TBD	  
	    //	  const double weight =  1;
	    //	  totalWeightPhotons += weight;
	    utl::Photon photonIn(pIn, -nIn, normWavelength, weight);
	    //	  photonIn.SetTime(TimeInterval(iTrace*tracebin + timeShift));
	    photonIn.SetTime(TimeInterval(photonTime));
	    telSim.AddPhoton(photonIn);

	    // cout << photonTime << " " << weight <<  endl;
	    
	  } // loop over all simulated entries. 
	  
	  //        rayTracedPhotonTrace[iTrace] += totalNRayTracedPhotonsPerBin;
	  //      } // loop over time bin
	}      //lloop over entry poinits
	// info << ", generated " << setw(6) << countRTPhotons << " photons"
      //      << ", total weight=" << totalWeightPhotons;
      // INFO(info);
	
      } // End loop over Telescopes
      
    } // End loop over Eyes
  }
  

  fInit = true; //initialization actially done at first round now it's time to generate photons
  fStatus = eGeneratePhotons;  
  cout << "=============================================== " << fLoop << endl;
  cout << "=============================================== " << fLoop << endl;
  cout << "=============================================== " << fLoop << endl;

  if (fLoopSelect == 0) {
    fLoop++;
  } else {fLoop = fLoopSelect;}

  return eSuccess;
}
  
  
utl::CoordinateSystemPtr
ELVESSimulator::GetElvesCoordinateSystem()
  const
{
  if (!fElvesCS)
    fElvesCS =
      CoordinateSystem::RotationY(GetZenith(),
                                  CoordinateSystem::RotationZ(GetAzimuth(),
                                                              GetLocalCoordinateSystem()));
  return fElvesCS;
}

utl::CoordinateSystemPtr
ELVESSimulator::GetLocalCoordinateSystem()
  const
{
  if (!fLocalCS)
    fLocalCS = fwk::LocalCoordinateSystem::Create(GetPosition());

  return fLocalCS;
}

void
ELVESSimulator::MakePosition(const utl::Point& position)
{
  fPosition = new Point(position);
}

// This function prints out a progress bar based on how far through the data the program is.                                  
void ELVESSimulator::displayProgress (Int_t currentLoop, Int_t totalLoops, Int_t &previousProgress) {
  float progress = (float)currentLoop / (float)totalLoops;
  if (int(progress*100.0) > previousProgress) {
    previousProgress = int(progress*100.0);
    int barWidth = 70;
    cout << "[";
    int pos = barWidth * progress;
    for (int j = 0; j < barWidth; ++j) {
      if (j < pos) cout << "=";
      else if (j == pos) cout << ">";
      else cout << " ";
    }
    cout << "] " << int(progress * 100.0) << " %\r";
    cout.flush();
  }
  return;
}


VModule::ResultFlag 
ELVESSimulator::Finish() 
{
  INFO("ELVESSimulator::Finish()");
  return eSuccess;
}

